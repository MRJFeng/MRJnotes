一、CPU占用率排查
‌定位高CPU进程‌
top命令查看CPU占用率最高的进程ID（PID），重点关注COMMAND列为java的进程‌45。

‌分析线程级CPU消耗‌
执行 ps -mp <PID> -o THREAD,tid,time | sort -rn 或 top -H -p <PID> 查看线程级CPU占用率，记录高消耗的线程ID（TID）‌45。

‌转换线程ID为十六进制‌
执行 printf "%x\n" <TID> 将TID转换为十六进制格式，用于后续线程堆栈分析‌45。

‌查看线程堆栈‌
通过 jstack <PID> | grep <十六进制TID> -A 30 定位具体代码段，检查是否存在死循环、锁竞争或阻塞操作‌46。

二、内存泄漏及GC问题排查
‌内存使用监控‌

使用 jmap -histo:live <PID> | head -n200 查看存活对象分布，识别异常占用的类‌27。
通过 jstat -gcutil <PID> 1000 20 观察GC频率和内存回收效率，若Full GC频繁或老年代持续增长，可能存在内存泄漏‌78。
‌Heap Dump分析‌
生成堆转储文件（jmap -dump:format=b,file=heap.bin <PID>），结合MAT工具分析对象引用链，定位未释放的静态集合类、缓存等‌12。

三、线程阻塞与死锁排查
‌获取线程Dump‌
执行 jstack <PID> > thread_dump.txt 导出线程快照，搜索BLOCKED、WAITING或TIMED_WAITING状态的线程，检查锁竞争或资源等待问题‌6。

‌死锁检测‌
jstack输出中若包含Found one Java-level deadlock，直接定位死锁涉及的线程和代码段‌26。

四、其他可能原因
‌IO/日志输出阻塞‌
检查控制台输出、日志写入是否因同步锁或磁盘IO瓶颈导致阻塞（参考案例：控制台输出占用过高CPU）‌3。

‌数据库/外部依赖‌
排查数据库连接池配置（如最大连接数不足）、慢SQL或第三方接口响应超时问题，使用连接池监控工具（如Druid）辅助分析‌3。

‌JVM参数优化‌
检查堆内存分配（-Xmx、-Xms）是否合理，避免频繁GC；调整垃圾回收器参数（如G1、CMS）‌78。

五、快速验证步骤
‌重启观察现象‌
若重启后卡顿暂时消失，但一段时间后复现，可优先排查内存泄漏或资源未释放问题‌12。

‌简化环境测试‌
剥离非核心依赖（如关闭部分功能模块），逐步定位问题模块‌
